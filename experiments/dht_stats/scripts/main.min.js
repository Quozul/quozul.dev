function ObjectToCSV(e, t) { let a = e + "\n"; return objectLoop(t, (e, t, o) => { a += o + ";" + e + ";", a += "\n" }), a } function download(e, t, a) { var o = new Blob([e], { type: a }); if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveOrOpenBlob(o, t); else { const e = document.createElement("a"), a = URL.createObjectURL(o); e.href = a, e.download = t, document.body.appendChild(e), e.click(), setTimeout(function () { document.body.removeChild(e), window.URL.revokeObjectURL(a) }, 0) } } function createChart(e, t, a = "line") { return new Chart(document.getElementById(e).getContext("2d"), { type: a, data: { labels: Object.keys(t), datasets: [{ label: "Messages per hours", data: Object.values(t), backgroundColor: "rgba(0, 99, 132, .2)", borderColor: "rgba(0, 99, 132, 1)", borderWidth: 1, lineTension: 0 }] }, options: { scales: { yAxes: [{ ticks: { beginAtZero: !0 } }] }, legend: { display: !1 }, tooltips: { intersect: !1 } } }) } function updateChart(e, t, a = "line") { e.data.labels = Object.keys(t), e.data.datasets[0].data = Object.values(t), e.type = a, e.update() } function changeProgress(e = "", t = 0, a = !1) { console.log(e, Math.floor(t)); const o = document.getElementById("file-progress"); o.style.width = Math.floor(t) + "%", o.innerHTML = e, a ? o.classList.add("bg-danger") : o.classList.remove("bg-danger") } function processFile(e) { const t = this.files[0]; if (null != t) { changeProgress("", 0), changeProgress("Starting worker thread...", 1); const e = new Worker("scripts/worker.min.js"); e.postMessage(t), e.onmessage = function (e) { switch (e.data[0]) { case "progress": changeProgress(e.data[1], e.data[2]); break; case "chart": null != window.charts[e.data[1]] ? updateChart(window.charts[e.data[1]], e.data[2], e.data[3]) : window.charts[e.data[1]] = createChart(e.data[1], e.data[2], e.data[3]), window.stats[e.data[1]] = e.data[2]; break; case "done": document.getElementById("pills-view-tab").classList.remove("disabled"), document.getElementById("pills-download-tab").classList.remove("disabled") } } } } const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-toggle="tooltip"]')), tooltipList = tooltipTriggerList.map(function (e) { return new bootstrap.Tooltip(e) }); window.charts = {}, window.stats = {}, document.getElementById("file-input").addEventListener("change", processFile);