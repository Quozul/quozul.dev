postMessage(["Thread started...",12]),importScripts("/scripts/utils.min.js"),onmessage=function(s){const e=s.data;let t=0,a="";const r=e.stream().getReader();r.read().then(function s({done:o,value:n}){if(o)return a;t+=n.length,postMessage(["progress","Loading file...",t/e.size*10+1]);for(const s of n)a+=String.fromCharCode(s);return r.read().then(s)}).then(s=>{try{postMessage(["progress","Verifying & parsing file...",13]);const e=JSON.parse(s);postMessage(["progress","Preparing variables...",14]);const t=e.meta,a=e.data;stats={hours:{},days:{},channels:{}};for(let s=0;s<24;s++)for(let e=0;e<60;e++)stats.hours[s.padZeros(2)+":"+e.padZeros(2)]=0;postMessage(["progress","Analysing file...",15]),objectLoop(a,(s,e,a,r)=>{const o=t.channels[a].name;objectLoop(s,(s,e,t)=>{const a=new Date(s.t),r=a.format("%yyyy-%MM-%dd");stats.hours[a.format("%hh:%mm")]++,null==stats.days[r]&&(stats.days[r]=0),stats.days[r]++,null==stats.channels[o]&&(stats.channels[o]=0),stats.channels[o]++}),postMessage(["progress","Analysing file...",15+e/r.length*75])}),postMessage(["progress","Creating charts...",85]),postMessage(["chart","messages-per-hour",stats.hours]),postMessage(["chart","messages-per-day",stats.days.sortByKey()]),postMessage(["chart","messages-per-channel",stats.channels.sortByValue().reverse(),"horizontalBar"]),postMessage(["progress","Done!",100]),postMessage(["done"])}catch(s){console.log(s),postMessage(["progress","File is not in the right format!",100,!0])}})};